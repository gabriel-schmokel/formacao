knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Para evitar as possíveis mensagens de atenção iremos inserir o respectivo bloco de código que segue.
knitr::opts_chunk$set(warning = FALSE, message = FALSE)   # Para evitar as possíveis mensagens de atenção vamos inserir esse bloco de comando.
#install.packages("dplyr")    # deixe comentada essa linha se o pacote já foi instalado.
library(dplyr)                # carregando a biblioteca dplyr
#
setwd("C:/Gabriel/trabalho/analise_tratamento_exploracao/linguagem_r_para_analise_de_dados/dados-covid-sp-master/data")     # direcionando o caminho do diretório.
covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")     # lendo o arquivo de dados.
View(covid_sp)      # visualizando o dataframe.
#
setwd("C:/Gabriel/trabalho/analise_tratamento_exploracao/linguagem_r_para_analise_de_dados/dados-covid-sp-master/data")     # direcionando o caminho do diretório.
covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")     # lendo o arquivo de dados.
View(covid_sp)      # visualizando todo dataframe.
head(covid_sp)      # visualizando as 6 primeiras linhas.
setwd("C:/Gabriel/trabalho/analise_tratamento_exploracao/linguagem_r_para_analise_de_dados/dados-covid-sp-master/data") # chamamos novamente o caminho do diretório onde se encontra o dataset para não ser gerado um erro ao chamar a leitura do arquivo.
covid_sp <- read.csv2('dados_covid_sp.csv', sep =";", encoding = "UTF-8")   #lendo o dataset da forma que permite a acentuação
View(covid_sp) # visualizando o dataframe
head(covid_sp) # visualizando as 6 primeiras linhas
covid_sp_alterado <- rename(covid_sp, municipio = nome_munic, data = datahora, rotulo=map_leg, codigo_mapa = map_leg_s) # alterando o nome das variáveis.
View(covid_sp_alterado)                 # visualizando o dataframe
head(covid_sp_alterado)                 # visualizando as 6 primeiras linhas
covid_sp_alterado$cod_ra <- NULL # excluir uma única coluna
covid_sp_alterado <- subset(covid_sp_alterado, select = -c(codigo_ibge, cod_drs))  # exluindo várias colunas pelo seu nome de identificação.
covid_sp_alterado <- select(covid_sp_alterado, -c(14,15)) # exlcuindo várias colunas pelo seu número de identificação.
covid_sp_alterado <- select(covid_sp_alterado, -c(17:19))  # exluindo intervalos de colunas
#covid_sp_alterado <- slice(covid_sp_alterado, -c(239660) # excluindo uma única linha
covid_sp_alterado <- slice(covid_sp_alterado, -c(239661:239666)) # excluindo um intervalo de linhas
covid_sp_alterado <- covid_sp_alterado %>% filter(municipio!="Ignorado") # filtrando o dataframe cuja as linhas não contenham o valor 'Ignorado' na coluna municipio
View(covid_sp_alterado)
sapply(covid_sp_alterado, function(x) sum(is.na(x)))
sapply(covid_sp_alterado, function(x) sum(is.nan(x)))
covid_sp_alterado2 <- replace(x = covid_sp_alterado,list = is.na(covid_sp_alterado),
values = 54)
tail(covid_sp_alterado2)
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-01' &
covid_sp_alterado2$data <= '2021-01-07'  ] <- 54
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-08' &
covid_sp_alterado2$data <= '2021-01-14'  ] <- 55
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-15' &
covid_sp_alterado2$data <= '2021-01-21'  ] <- 56
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-22' &
covid_sp_alterado2$data <= '2021-01-28'  ] <- 57
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-29' &
covid_sp_alterado2$data <= '2021-02-04'  ] <- 58
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-05' &
covid_sp_alterado2$data <= '2021-02-12'  ] <- 59
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-13' &
covid_sp_alterado2$data <= '2021-02-20'  ] <- 60
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-21' &
covid_sp_alterado2$data <= '2021-02-27'  ] <- 61
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-28' &
covid_sp_alterado2$data <= '2021-03-6'  ] <- 62
View(covid_sp_alterado2)
tail(covid_sp_alterado2)
str(covid_sp_alterado2)
glimpse(covid_sp_alterado2)
covid_sp_alterado2$semana_epidem <- as.integer(covid_sp_alterado2$semana_epidem)
str(covid_sp_alterado2)       # tranformando semna_epidem na classe int
covid_sp_alterado2$data <- as.Date(covid_sp_alterado2$data, format ='%Y-%m-%d')
str(covid_sp_alterado2)       # tranformando data na classe data
covid_sp_alterado2["percentual idosos"]<-100*covid_sp_alterado2$pop_60/covid_sp_alterado2$pop # Resolve a expressão acima e cria a coluna 'idoso(%)'
View(covid_sp_alterado2) # visualizando os dados
head(covid_sp_alterado2)
#
setwd("C:\Gabriel\trabalho\analise_tratamento_exploracao\projeto_01")     # direcionando o caminho do diretório.
#
setwd("C:\Gabriel\trabalho\analise_tratamento_exploracao\projeto_01")     # direcionando o caminho do diretório.
# CARREGAR PACOTES
library(dplyr)
# direcionando o caminho leitura para o diretório que contém nosso arquivo tratado.
setwd("C:/gabriel/trabalho/cursos/linguagem_r_para_analise_de_dados/projeto_01")
# install.packages("dplyr")
library(dplyr)
library(dplyr)     # carregando a biblioteca dplyr
setwd("C:/gabriel/trabalho/cursos/linguagem_r_para_analise_de_dados/projeto_01")    # direcionando o caminho leitura para o diretório que contém nosso arquivo tratado.
covid_sp_tratado <- read.csv2('covid_sp_tratado', sep = ',', encoding = "UTF-8")    # fazendo a leitura do arquivo
View(covid_sp_tratado)      # visualizando o DataFrame covid_sp_tradado
setwd("C:/gabriel/trabalho/cursos/linguagem_r_para_analise_de_dados/projeto_01")    # direcionando o caminho leitura para o diretório que contém nosso arquivo tratado.
covid_sp_tratado <- read.csv2('covid_sp_tratado', sep = ',', encoding = "UTF-8")    # fazendo a leitura do arquivo
covid_sp_tratado <- read.csv2('covid_sp_tratado', sep = ';', encoding = "UTF-8")    # fazendo a leitura do arquivo
# CARREGAR PACOTES
library(dplyr)
# BUSCAR DIRETÓRIO (PASTA COM OS ARQUIVOS)
setwd("C:/Users/Luciano/Desktop/Linguagem_R/dados-covid-sp-master/data")
# install.packages("dplyr")
library(dplyr)     # carregando a biblioteca dplyr
setwd("C:/gabriel/trabalho/cursos/linguagem_r_para_analise_de_dados/projeto_01")    # direcionando o caminho leitura para o diretório que contém nosso arquivo tratado.
covid_sp_tratado <- read.csv2('covid_sp_tratado.csv', sep = ";", encoding="UTF-8")  # fazendo a leitura do arquivo
View(covid_sp_tratado)      # visualizando o DataFrame covid_sp_tradado
covid_sp_tratado <- read.csv2('covid_sp_tratado.csv', sep = ",", encoding="UTF-8")  # fazendo a leitura do arquivo
View(covid_sp_tratado)      # visualizando o DataFrame covid_sp_tradado
covid_sp_tratado <- read.csv2('covid_sp_tratado.csv', sep = ",")
View(covid_sp_tratado)
# Verificando se a classe dos dados está correta
glimpse(covid_sp_tratado)
covid_sp_tratado <- read.csv2('covid_sp_tratado.csv', sep = ",")
View(covid_sp_tratado)
# Perce-be que a variável idoso é string, deve-se passar para numérica
# A variável data também deve ser mudada para class date
covid_sp_tratado$idoso... <- as.numeric(covid_sp_tratado_idoso)
# Perce-be que a variável idoso é string, deve-se passar para numérica
# A variável data também deve ser mudada para class date
covid_sp_tratado$idoso... <- as.numeric(covid_sp_tratado$idoso...)
# Perce-be que a variável idoso é string, deve-se passar para numérica
# A variável data também deve ser mudada para class date
covid_sp_tratado$idoso... <- as.numeric(covid_sp_tratado$idoso...)
covid_sp_tratado$data <- as.Date(covid_sp_tratado$data)
glimpse(covid_sp_tratado)
covid_sp_tratado$data <- as.Date(covid_sp_tratado$data, format ='%Y-%m-%d')                 # mudando a variável data para o tipo date
glimpse(covid_sp_tratado)
View(covid_sp_tratado)
covid_sp_tratado <- rename(covid_sp_tratado, percentual_idoso = idoso...)                   # mudando o nome da variável ...idoso para uma mais adequada.
View(covid_sp_tratado)
# Podemos utilizar o método filter(...), em adição com o operador %>% para, para buscar o que desejamos no DataFrame.
# No exemplo abaixo estamos buscando apenas as linhas que contenham o munícipio de Campinas
covid_campinas <- covid_sp_tratado %>% filter(municipio=="Campinas")
View(covid_campinas)
# Podemos criar uma nova coluna informando a densidade demográfica de campinas
# Para isso devemos dividir o número de pessoas que vivem na cidade de campinas pela area quadrada do municipio
covid_campinas["dens_demografica"] <- covid_campinas$pop/covid_campinas$area
View(covid_campinas)
# Como o resultado da área demográfica do município de campinas parece estar errado sendo 100 vezes maior do que a informado pelos dados do google
# iremos então fazer essa alteração. Podemos ver que isso irá afetar o cálculo da densidade populacional, por isso o resultado apresentado anteriormente
# parece algo inviável (Campinas tem mais de 15 pessoas por quilometro quadrado).
covid_campinas["area"] <- covid_campinas$area/100
covid_campinas["dens_demografica"] <- covid_campinas$pop/covid_campinas$area
View(covid_campinas)
# Uma outra forma de fazer uma filtragem nos dados é utilizando o método which(...)
# Nessa situação estamos pegando apenas as linhas que correspondem ao municipio de garulhos
covid_guarulhos <- covid_sp_tratado[which(covid_sp_tratado$municipio=="Guarulhos"), ]
covid_guarulhos["area"] <- covid_guarulhos$area/100                       # arrumando os dados correspondentes a área de guarulhos
covid_guarulhos["dens_demografica"] <- covid_guarulhos$pop/covid_guarulhos$area        # cálculo da densidade populacional de guarulhos
View(covid_guarulhos)
# Para o cálculo da média utilizamos a função mean(...), passamos como argumento a variável que desejamos
# calcular do DataFrame.
mean(covid_campinas$obitos_novos)
mean(covid_campinas$casos_novos)
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), mean)
View(covid_campinas)
# com a função summarise_at(...) podemos calcular diretamente a média de mais de uma variável, devemos apenas passar como argumentos
# as variáveis que se deseja calcular a média, o dataframe e operação que desejamos fazer (no caso é o cálculo da média)
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), mean)
mean(covid_guarulhos$obitos_novos)  #
mean(covid_guarulhos$casos_novos)
# Uma curva importante de se ter é a média móvel em relação ao tempo. Com ela podemos avaliar se o número de
# casos e óbitos está diminuindo ou aumentando.
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red")
# Uma curva importante de se ter é a média móvel em relação ao tempo. Com ela podemos avaliar se o número de
# casos e óbitos está diminuindo ou aumentando.
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red")
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
# Uma curva importante de se ter é a média móvel em relação ao tempo. Com ela podemos avaliar se o número de
# casos e óbitos está diminuindo ou aumentando.
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red")
# Uma curva importante de se ter é a média móvel em relação ao tempo. Com ela podemos avaliar se o número de
# casos e óbitos está diminuindo ou aumentando.
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red")
# Mediana
# A média, muitas vezes pode ser afetada por um valor outlier, por conta disso vamos também tomar a mediana dos novos obitos e casos para ambos municípios.
median(covid_campinas$obitos_novos)
median(covid_campinas$casos_novos)
# com a função summarise_at(...) podemos calcular diretamente a média de mais de uma variável, devemos apenas passar como argumentos
# as variáveis que se deseja calcular a média, o dataframe e operação que desejamos fazer (no caso é o cálculo da média)
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), mean)
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), median)
# Obtenção da moda
moda(covid_campinas$obitos_novos)
moda <- function(m) {
valor_unico <- unique(m) #Busca o valor único para a coluna.
#valor_unico[which.max(tabulate(match(m, valor_unico)))] #tabular (contabilizar quantas vezes o valor único aparece) e buscar o maior valor
print(valor_unico)
}
# Obtenção da moda
moda(covid_campinas$obitos_novos)
# Obtenção da moda
moda(covid_campinas$obitos_novos)
# Obtenção da moda
moda(covid_campinas$obitos_novos)
moda(covid_campinas$casos_novos)
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), moda)
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), moda)
# Podemos utilizar o método filter(...), em adição com o operador %>% para, para buscar o que desejamos no DataFrame.
# No exemplo abaixo estamos buscando apenas as linhas que contenham o munícipio de Campinas
covid_campinas <- covid_sp_tratado %>% filter(municipio=="Campinas")    # Estamos armazenando a busca feita no data frame covid_campinas
View(covid_campinas)
# Podemos criar uma nova coluna informando a densidade demográfica de campinas
# Para isso devemos dividir o número de pessoas que vivem na cidade de campinas pela area quadrada do municipio
covid_campinas["dens_demografica"] <- covid_campinas$pop/covid_campinas$area
# Como o resultado da área demográfica do município de campinas parece estar errado sendo 100 vezes maior do que a informado pelos dados do google
# iremos então fazer essa alteração. Podemos ver que isso irá afetar o cálculo da densidade populacional, por isso o resultado apresentado anteriormente
# parece algo inviável (Campinas tem mais de 15 pessoas por quilometro quadrado).
covid_campinas["area"] <- covid_campinas$area/100
covid_campinas["dens_demografica"] <- covid_campinas$pop/covid_campinas$area
# Uma outra forma de fazer uma filtragem nos dados é utilizando o método which(...)
# Nessa situação estamos pegando apenas as linhas que correspondem ao municipio de garulhos
covid_guarulhos <- covid_sp_tratado[which(covid_sp_tratado$municipio=="Guarulhos"), ]
covid_guarulhos["area"] <- covid_guarulhos$area/100                       # arrumando os dados correspondentes a área de guarulhos
covid_guarulhos["dens_demografica"] <- covid_guarulhos$pop/covid_guarulhos$area        # cálculo da densidade populacional de guarulhos
# Inicialmente vamos focar a nossa análise nas medidas de centralidade das regiões de garulhos e campinas. Um dos dados
# importante de se obter é média dos casos novos e dos óbitos novos.
# Para o cálculo da média utilizamos a função mean(...), passamos como argumento a variável do DataFrame que desejamos
# calcular a média.
mean(covid_campinas$obitos_novos)
mean(covid_campinas$casos_novos)
# com a função summarise_at(...) podemos calcular diretamente a média de mais de uma variável, devemos apenas passar como argumentos
# as variáveis que se deseja calcular a média, o dataframe e operação que desejamos fazer (no caso é o cálculo da média)
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), mean)
mean(covid_guarulhos$obitos_novos)  # cálculo da média de  novos obitos em guarulhos
mean(covid_guarulhos$casos_novos)   # cálculo da média de novos casos em guarulhos
# Uma curva importante de se ter é a média móvel em relação ao tempo.
# Com ela podemos avaliar se o número de casos e óbitos está diminuindo ou aumentando.
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red")
# Uma curva importante de se ter é a média móvel em relação ao tempo.
# Com ela podemos avaliar se o número de casos e óbitos está diminuindo ou aumentando.
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red")
# Mediana
# A média, muitas vezes pode ser afetada por um valor outlier, por conta disso vamos também tomar a mediana dos novos obitos e casos para ambos municípios.
median(covid_campinas$obitos_novos)       # cálculo da mediana de novos óbitos.
median(covid_campinas$casos_novos)        # cálculo da mediana de novos casos.
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), median)      # aplicando o cálculo da mediana a duas variáveis.
median(covid_guarulhos$obitos_novos)      # cálculo da mediana de novos óbitos
median(covid_guarulhos$casos_novos)       # cálculo da mediana de novos casos
# Moda
# Diferente da média e mediana, não existe uma função pronta para o calculo da moda, por isso a respectiva função é criada
moda <- function(m) {
valor_unico <- unique(m) # Busca todos os valores únicos que passamos como argumento. Exemplo: recebendo obitos novos do dataframe coluna, iremos receber todos os seus valores, independentes se eles são iguais.
valor_unico[which.max(tabulate(match(m, valor_unico)))] # tabulate(...) (contabilizar quantas vezes o valor único aparece) e buscar o maior valor depois da organização por grupos
}
# Obtenção da moda
moda(covid_campinas$obitos_novos)
moda(covid_campinas$casos_novos)
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), moda)
moda(covid_guarulhos$obitos_novos)
moda(covid_guarulhos$casos_novos)
plot(covid_campinas$data,covid_campinas$obitos_mm7d, title("MÉDIA MÓVEL"), col = "purple")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Para evitar as possíveis mensagens de atenção iremos inserir o respectivo bloco de código que segue.
#install.packages("dplyr")    # deixe comentada essa linha se o pacote já foi instalado.
library(dplyr)                # carregando a biblioteca dplyr
#
setwd("C:/gabriel/trabalho/analise_tratamento_exploracao/linguagem_r_para_analise_de_dados/dados-covid-sp-master/data")     # direcionando o caminho do diretório.
covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")     # lendo o arquivo de dados.
View(covid_sp)      # visualizando o dataframe.
#
setwd("C:/gabriel/trabalho/analise_tratamento_exploracao/linguagem_r_para_analise_de_dados/dados-covid-sp-master/data")     # direcionando o caminho do diretório.
covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")     # lendo o arquivo de dados.
View(covid_sp)      # visualizando o dataframe.
head(covid_sp)
setwd("C:/Gabriel/trabalho/analise_tratamento_exploracao/linguagem_r_para_analise_de_dados/dados-covid-sp-master/data") # chamamos novamente o caminho do diretório onde se encontra o dataset para não ser gerado um erro ao chamar a leitura do arquivo.
covid_sp <- read.csv2('dados_covid_sp.csv', sep =";", encoding = "UTF-8")   #lendo o dataset da forma que permite a acentuação
View(covid_sp) # visualizando o dataframe
head(covid_sp) # visualizando as 6 primeiras linhas
covid_sp_alterado <- rename(covid_sp, municipio = nome_munic, data = datahora, rotulo=map_leg, codigo_mapa = map_leg_s) # alterando o nome das variáveis.
View(covid_sp_alterado)                 # visualizando o dataframe
head(covid_sp_alterado)                 # visualizando as 6 primeiras linhas
covid_sp_alterado$cod_ra <- NULL # excluir uma única coluna
covid_sp_alterado <- subset(covid_sp_alterado, select = -c(codigo_ibge, cod_drs))  # exluindo várias colunas pelo seu nome de identificação.
covid_sp_alterado <- select(covid_sp_alterado, -c(14,15)) # exlcuindo várias colunas pelo seu número de identificação.
covid_sp_alterado <- select(covid_sp_alterado, -c(17:19))  # exluindo intervalos de colunas
head(covid_sp_alterado)
#covid_sp_alterado <- slice(covid_sp_alterado, -c(239660) # excluindo uma única linha
covid_sp_alterado <- slice(covid_sp_alterado, -c(239661:239666)) # excluindo um intervalo de linhas
covid_sp_alterado <- covid_sp_alterado %>% filter(municipio!="Ignorado") # filtrando o dataframe cuja as linhas não contenham o valor 'Ignorado' na coluna municipio
View(covid_sp_alterado)
sapply(covid_sp_alterado, function(x) sum(is.na(x)))
sapply(covid_sp_alterado, function(x) sum(is.nan(x)))
covid_sp_alterado2 <- replace(x = covid_sp_alterado,list = is.na(covid_sp_alterado),
values = 54)
tail(covid_sp_alterado2)
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-01' &
covid_sp_alterado2$data <= '2021-01-07'  ] <- 54
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-08' &
covid_sp_alterado2$data <= '2021-01-14'  ] <- 55
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-15' &
covid_sp_alterado2$data <= '2021-01-21'  ] <- 56
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-22' &
covid_sp_alterado2$data <= '2021-01-28'  ] <- 57
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-29' &
covid_sp_alterado2$data <= '2021-02-04'  ] <- 58
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-05' &
covid_sp_alterado2$data <= '2021-02-12'  ] <- 59
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-13' &
covid_sp_alterado2$data <= '2021-02-20'  ] <- 60
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-21' &
covid_sp_alterado2$data <= '2021-02-27'  ] <- 61
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-28' &
covid_sp_alterado2$data <= '2021-03-6'  ] <- 62
str(covid_sp_alterado2)
glimpse(covid_sp_alterado2)
covid_sp_alterado2$semana_epidem <- as.integer(covid_sp_alterado2$semana_epidem)
str(covid_sp_alterado2)       # tranformando semna_epidem na classe int
covid_sp_alterado2$data <- as.Date(covid_sp_alterado2$data, format ='%Y-%m-%d')
str(covid_sp_alterado2)       # tranformando data na classe data
covid_sp_alterado2["idoso(%)"]<-100*covid_sp_alterado2$pop_60/covid_sp_alterado2$pop # Resolve a expressão acima e cria a coluna 'idoso(%)'
View(covid_sp_alterado2) # visualizando os dados
head(covid_sp_alterado2)
covid_campinas <- covid_sp_alterado2 %\>% filter(municipio == "Campinas") # pegando os dados cujo município seja o de Campinas do DataFrame covid_sp_alterado2.
covid_campinas <- covid_sp_alterado2 %\>% filter(municipio == "Campinas") # pegando os dados cujo município seja o de Campinas do DataFrame covid_sp_alterado2.
covid_campinas <- covid_sp_alterado2 %>% filter(municipio == "Campinas") # pegando os dados cujo município seja o de Campinas do DataFrame covid_sp_alterado2.
View(covid_campinas)      # visualizando os dados filtrados do Dataframe covid_sp_alterado2 para o município de campinas
head(covid_campinas)
View(covid_campinas)
covid_guarulhos <- covid_sp_alterado2[which(covid_sp_alterado2$municipio=="Guarulhos"),]
covid_campinas <- covid_sp_alterado2 %>% filter(municipio == "Campinas") # pegando os dados cujo município seja o de Campinas do DataFrame covid_sp_alterado2.
View(covid_campinas)      # visualizando os dados filtrados do Dataframe covid_sp_alterado2 para o município de campinas
head(covid_campinas)
covid_guarulhos <- covid_sp_alterado2[which(covid_sp_alterado2$municipio=="Guarulhos"),]
View(covid_guarulhos)      # visualizando os dados filtrados do DataFrame covid_sp_alterado2 para o município de guarulhos
head(covid_guarulhos)
covid_campinas["dens_demografica"] <- covid_campinas$pop/covid_campinas$area
head(covid_campinas)
covid_guarulhos["dens_demografica"] <- covid_guarulhos$pop/covid_guarulhos$area
head(covid_guarulhos)
covid_campinas["area"] <- covid_campinas$area/100
covid_campinas["dens_demografica"] <- covid_campinas$pop/covid_campinas$area
head(covid_campinas)
covid_guarulhos["area"] <- covid_guarulhos$area/100
covid_guarulhos["dens_demografica"] <- covid_guarulhos$pop/ covid_guarulhos$area
head(covid_guarulhos)
covid_sp_alterado2 <- replace(x = covid_sp_alterado,list = is.na(covid_sp_alterado),
values = 54)
tail(covid_sp_alterado2)
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-01' &
covid_sp_alterado2$data <= '2021-01-07'  ] <- 54
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-08' &
covid_sp_alterado2$data <= '2021-01-14'  ] <- 55
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-15' &
covid_sp_alterado2$data <= '2021-01-21'  ] <- 56
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-22' &
covid_sp_alterado2$data <= '2021-01-28'  ] <- 57
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-01-29' &
covid_sp_alterado2$data <= '2021-02-04'  ] <- 58
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-05' &
covid_sp_alterado2$data <= '2021-02-12'  ] <- 59
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-13' &
covid_sp_alterado2$data <= '2021-02-20'  ] <- 60
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-21' &
covid_sp_alterado2$data <= '2021-02-27'  ] <- 61
covid_sp_alterado2$semana_epidem[covid_sp_alterado2$data >= '2021-02-28' &
covid_sp_alterado2$data <= '2021-03-6'  ] <- 62
str(covid_sp_alterado2)
glimpse(covid_sp_alterado2)
covid_sp_alterado2$semana_epidem <- as.integer(covid_sp_alterado2$semana_epidem)
str(covid_sp_alterado2)       # tranformando semna_epidem na classe int
covid_sp_alterado2$data <- as.Date(covid_sp_alterado2$data, format ='%Y-%m-%d')
str(covid_sp_alterado2)       # tranformando data na classe data
covid_sp_alterado2["percentual_idoso"]<-100*covid_sp_alterado2$pop_60/covid_sp_alterado2$pop # Resolve a expressão acima e cria a coluna 'idoso(%)'
View(covid_sp_alterado2) # visualizando os dados
head(covid_sp_alterado2)
covid_campinas <- covid_sp_alterado2 %>% filter(municipio == "Campinas") # pegando os dados cujo município seja o de Campinas do DataFrame covid_sp_alterado2.
View(covid_campinas)      # visualizando os dados filtrados do Dataframe covid_sp_alterado2 para o município de campinas
head(covid_campinas)
covid_guarulhos <- covid_sp_alterado2[which(covid_sp_alterado2$municipio=="Guarulhos"),]
View(covid_guarulhos)      # visualizando os dados filtrados do DataFrame covid_sp_alterado2 para o município de guarulhos
head(covid_guarulhos)
covid_campinas["dens_demografica"] <- covid_campinas$pop/covid_campinas$area
head(covid_campinas)
covid_guarulhos["dens_demografica"] <- covid_guarulhos$pop/covid_guarulhos$area
head(covid_guarulhos)
covid_campinas["area"] <- covid_campinas$area/100
covid_campinas["dens_demografica"] <- covid_campinas$pop/covid_campinas$area
head(covid_campinas)
covid_guarulhos["area"] <- covid_guarulhos$area/100
covid_guarulhos["dens_demografica"] <- covid_guarulhos$pop/ covid_guarulhos$area
head(covid_guarulhos)
print(mean(covid_campinas$obitos_novos))  # média de óbitos novos
print(mean(covid_campinas$casos_novos))   # média de casos novos
print("media",mean(covid_campinas$obitos_novos))  # média de óbitos novos
print(mean(covid_campinas$casos_novos))   # média de casos novos
print('media',mean(covid_campinas$obitos_novos))  # média de óbitos novos
print(mean(covid_campinas$casos_novos))   # média de casos novos
print(mean(covid_campinas$obitos_novos))  # média de óbitos novos
print(mean(covid_campinas$casos_novos))   # média de casos novos
summarise_at(covid_campinas, vars(obitos_novos, casos_novos), mean) # cálculo da média em uma única linha de código.
mean(covid_guarulhos$obitos_novos) # cálculo da média de novos obitos em guarulhos
mean(covid_guarulhos$casos_novos)  # cálculo da média de novos casos em guarulhos
summarise_at(covid_guarulhos, vars(obitos_novos, casos_novos), mean) # cálculo da média em uma única linha de código, gera um dataframe de saída.
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red") plot(covid_campinas$data,covid_campinas$obitos_mm7d, title("MÉDIA MÓVEL"), col = "purple")
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red") plot(covid_campinas$data,covid_campinas$obitos_mm7d, title("MÉDIA MÓVEL"), col = "purple")
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL"), col = "red")
plot(covid_campinas$data,covid_campinas$casos_mm7d, title("MÉDIA MÓVEL CAMPINAS"), col = "red")
plot(covid_guarulhos$data,covid_guarulhos$casos_mm7d, title("MÉDIA MÓVEL GUARULHOS"), col = "red")
plot(covid_guarulhos$data,covid_guarulhos$casos_mm7d, title("MÉDIA MÓVEL GUARULHOS"), col = "purple")
